clc;
clear;
close all;                                                                                                                                                                                                                        

%% Problem Definition for Tests
fname='quadraticSolver.m';
%fname='tritype.m';
CostFunction_t=@(fname,mutants,tcase)MinOne_t(fname,mutants,tcase);     % Tester Cost Function
nVar_t=12;            % Number of Decision Variables
VarSize_t=[1 nVar_t];   % Decision Variables Matrix Size

% Problem Definition for Mutants
CostFunction=@(fname,mutant,testcases)MinOne(fname,mutant,testcases);     % Mutant Cost Function
num = numel(de2bi(numOfLines(fname)));
nVar=num+4;            % Number of Decision Variables
VarSize=[1 nVar];   % Decision Variables Matrix Size
disp('...Initializing...');

%% GAs Parameters
MaxIt=10;	% Maximum Number of Iterations
nPop=20;	% Test Population Size
mnPop=20;   % Mutant Population Size
nElite = 0.1*nPop; % Elite Size
pc=0.8;                 % Crossover Percentage
%nc=2*round(pc*nPop/2);  % Number of Offsprings (also Parnets)
nc=(nPop-nElite);  % Number of Offsprings (also Parents)
pm=0.3;                 % Mutation Percentage
nm=round(pm*nPop);      % Number of Mutants
mu=0.02;                % Mutation Rate

beta=8;         % Selection Pressure
TournamentSize=3;   % Tournamnet Size


pause(0.01); % Needed due to a bug in older versions of MATLAB

%% Initialization
% Mutating GA
empty_individual.Position=[];
empty_individual.Cost=[];


pop=repmat(empty_individual,nPop,1);
mutants=cell(mnPop,1);
for i=1:mnPop
    
    % Initialize Position
    pop(i).Position=randi([0 1],VarSize);
    mutants{i}=pop(i).Position;
    %disp(mutants{i});

end
BestCost=zeros(MaxIt,1);
AveCost=zeros(MaxIt,1);
BestCost_t=zeros(MaxIt,1);
AveCost_t=zeros(MaxIt,1);

% Tester Initialization
empty_individual_t.Position=[];
empty_individual_t.Cost=[];
empty_individual_t.Gen=[];

pop_t=repmat(empty_individual_t,nPop,1);
tests=cell(nPop,1);
for i=1:nPop
    % Initialize Position
    pop_t(i).Position=randi([0 1],VarSize_t);    
    tests{i}=pop_t(i).Position;
end

emp.operator=[];
emp.score=[];
opscore=repmat(emp,4,1);
opscore(1).operator='Arithmetic';
opscore(2).operator='Relational';
opscore(3).operator='Conditional';
opscore(4).operator='Logical';
for i=1:length(opscore)
    opscore(i).score=50;
end

empt.line=[];
empt.score=[];
linescore=repmat(empt,num,1);
for j=1:numOfLines(fname)
    linescore(j).line=j;
    linescore(j).score=100;
    
end

bc_t=0;
bc=nPop*mnPop;
%% Main Loop

for it=1:MaxIt
    % Full Tester GA
    
    for i=1:nPop
        tcase=pop_t(i).Position;
        pop_t(i).Cost=CostFunction_t(fname,mutants,tcase); % Should I evaluate before performing crossover?
    end
    popc_t=repmat(empty_individual_t,nc/2,2);
    testsc=cell(nc/2,2);
    
    for k=1:(nPop-nElite)/2
    %for k=1:nPop/2
        i1_t=TournamentSelection_t(pop_t,TournamentSize);
        i2_t=TournamentSelection_t(pop_t,TournamentSize);
        % Select Parents
        p1_t=pop_t(i1_t);
        p2_t=pop_t(i2_t);
        % Perform Test Crossover
        [popc_t(k,1).Position, popc_t(k,2).Position]=Crossover_t(p1_t.Position,p2_t.Position);
        popc_t(k,1).Position=Mutate_t(popc_t(k,1).Position,mu);
        popc_t(k,2).Position=Mutate_t(popc_t(k,2).Position,mu);
        testsc{k,1}=popc_t(k,1).Position;
        testsc{k,2}=popc_t(k,2).Position;
    end
    
    % Evaluate Tests Generated by the Tester
    for k=1:(nPop-nElite)/2
        tcase1=testsc{k,1};
        tcase2=testsc{k,2};
        popc_t(k,1).Cost=CostFunction_t(fname,mutants,tcase1);%popc_t(k,1).Position);
        popc_t(k,2).Cost=CostFunction_t(fname,mutants,tcase2);
    end
    % Store Elite Test
    Elites_t = pop_t(1:nElite);
    
    popc_t=popc_t(:);
    pop_t=[Elites_t
          popc_t]; % #ok
    BestSol_t=pop_t(1);
%     
%   % Store Best Cost Ever Found
%     BestCost_t(it)=BestSol_t.Cost;
    if(bc_t<pop_t(1).Cost)
        bc_t=BestSol_t.Cost;
    end
    
    % Store Best Cost Ever Found
    BestCost_t(it)=bc_t;

    % Save the tests to be used in the next iteration/generation
    for itt=1:length(pop_t)
        tests{itt}=pop_t(itt).Position;
    end
    %disp(['Iteration ' num2str(it) ': Average Test Cost = ' num2str(AveCost_t(it))]);
    disp(['Iteration ' num2str(it) ': Best Test Cost = ' num2str(BestCost_t(it))]);
    
    
    % Full Mutation GA
    % Remember the mutants were generated before the main loop
    for i=1:mnPop
        mutant=pop(i).Position;
        pop(i).Cost=CostFunction(fname,mutant,tests); 
    end
    popc=repmat(empty_individual,nc/2,2);
    mutantsc=cell(nc/2,2);
    for k=1:(mnPop-nElite)/2
        % Mutants Crossover
        i1=TournamentSelection(pop,TournamentSize);
        i2=TournamentSelection(pop,TournamentSize);
        % Select Mutant Parents
        p1=pop(i1);
        p2=pop(i2);
        % Perform Mutant Crossover
        [popc(k,1).Position, popc(k,2).Position]=Crossover(p1.Position,p2.Position);
        popc(k,1).Position=Mutate(popc(k,1).Position,mu);
        popc(k,2).Position=Mutate(popc(k,2).Position,mu);
        mutantsc{k,1}=popc(k,1).Position;
        mutantsc{k,2}=popc(k,2).Position;
    end
    % Evaluate Mutants Offpspring
    for k=1:(mnPop-nElite)/2
        mutant1=mutantsc{k,1};
        mutant2=mutantsc{k,2};
        popc(k,1).Cost=CostFunction(fname,mutant1,tests);
        popc(k,2).Cost=CostFunction(fname,mutant2,tests);
    end
    % Store Elites
    Elites=pop(1:nElite);
    popc=popc(:);
    pop=[Elites
        popc]; % #ok
  
    % Store Best Solution
    BestSol=pop(1);
    Elites=pop(1:nElite);
    if(bc>=pop(1).Cost)
        bc=BestSol.Cost;
    end
    
    BestCost(it)=bc;
    
    for itt=1:length(pop)
        mutants{itt}=pop(itt).Position;
    end
    
    disp(['Iteration ' num2str(it) ': Best Mutant Cost = ' num2str(BestCost(it))]);

end
disp('Completed');

figure;
plot(BestCost_t,'LineWidth',1);
xlabel('Iteration');
ylabel('Best Test Cost');
grid on;
pause(2);
figure;
plot(BestCost,'LineWidth',1);
xlabel('Iteration');
ylabel('Mutant Cost');
grid on;